
======================================netty==================================
每个Channel都将会被分配一个ChannelPipeline和ChannelConfig。ChannelConfig 包含了该
Channel的所有配置设置，并且支持热更新。由于特定的传输可能具有独特的设置，所以它可能会实现
一个ChannelConfig 的子类型。
由于 Channel 是独一无二的，所以为了保证顺序将 Channel 声明为 java.lang.Comparable
的一个子接口。因此，如果两个不同的 Channel 实例都返回了相同的散列码，那么 AbstractChannel
中的 compareTo()方法的实现将会抛出一个 Error。ChannelPipeline 持有所有将应用于入站和出站
数据以及事件的 ChannelHandler 实例，这些 ChannelHandler 实现了应用程序用于处理状态变化以
及数据处理的逻辑.

================================

ChannelHandler 的典型用途包括:

1.将数据从一种格式转换为另一种格式；
2.提供异常的通知；
3.提供 Channel 变为活动的或者非活动的通知；
4.提供当 Channel 注册到 EventLoop 或者从 EventLoop 注销时的通知；
5.提供有关用户自定义事件的通知。

===================================

Channel 典型的方法
write 将数据写到远程节点。这个数据将被传递给 ChannelPipeline，并且排队直到它被冲刷
flush 将之前已写的数据冲刷到底层传输，如一个 Socket
writeAndFlush 一个简便的方法，等同于调用 write()并接着调用 flush()

================================================================

NIO      io.netty.channel.socket.nio           使用 java.nio.channels 包作为基础——基于选择器的方式

Epoll    io.netty.channel.epoll                由 JNI 驱动的 epoll()和非阻塞 IO。这个传输支持只有在
                                               Linux上可用的多种特性，如SO_REUSEPORT，比 NIO 传输更
                                               快，而且是完全非阻塞的

OIO      io.netty.channel.socket.oio           使用 java.net 包作为基础——使用阻塞流

Local    io.netty.channel.local                可以在 VM 内部通过管道进行通信的本地传输

Embedded io.netty.channel.embedded             Embedded 传输，允许使用 ChannelHandler 而又不需要一个
                                               真正的基于网络的

===============================================================================

NIO

选择器背后的基本概念是充当一个注册表，在那里你将可以请求在 Channel 的状态发生变化时得到通知;

OP_ACCEPT           请求在接受新连接并创建 Channel 时获得通知

OP_CONNECT          请求在建立一个连接时获得通知

OP_READ             请求当数据已经就绪，可以从 Channel 中读取时获得通知

OP_WRITE            请求当可以向 Channel 中写更多的数据时获得通知。这处理了套接字缓冲区被
                    完全填满时的情况，这种情况通常发生在数据的发送速度比远程节点可处理的速
                    度更快

零拷贝（zero-copy）是一种目前只有在使用 NIO 和 Epoll 传输时才可使用的特性。

=================================================================================

Epoll—用于 Linux 的本地非阻塞传输

如果要使用 epoll 替代 NIO，只需要将 NioEventLoopGroup替换为EpollEventLoopGroup，并且将
NioServerSocketChannel.class 替换为EpollServerSocketChannel.class 即可。

=================================================================================

OIO

Netty利用了SO_TIMEOUT这个Socket标志，它指定了等待一个I/O操作完成的最大毫秒数。如果操作在指
定的时间间隔内没有完成，则将会抛出一个SocketTimeout Exception。Netty将捕获这个异常并继续处
理循环。在EventLoop下一次运行时，它将再次尝试。这实际上也是类似于Netty这样的异步框架能够支持
OIO的唯一方式.

==================================================================================

用于 JVM 内部通信的 Local 传输

和服务器 Channel 相关联的 SocketAddress 并没有绑定物理网络地址；相反，只要服务器还在运行，
它就会被存储在注册表里，并在 Channel 关闭时注销。因为这个传输并不接受真正的网络流量，所以它
并不能够和其他传输实现进行互操作。

==================================================================================

Embedded

Netty 提供了一种输，使得你可以将一组ChannelHandler作为帮助器类嵌入到其他的ChannelHandler
内部。通过这种方式，你将可以扩展一个 ChannelHandler 的功能，而又不需要修改其内部代码。不足为
奇的是，Embedded 传输的关键是一个被称为 EmbeddedChannel 的具体的 Channel实现。

==================================================================================

ByteBuf

Java NIO 提供了 ByteBuffer 作为它的字节容器，但是这个类使用起来过于复杂，而且也有些繁琐。
Netty 的 ByteBuffer 替代品是 ByteBuf，一个强大的实现，既解决了 JDK API 的局限性，又为网
络应用程序的开发者提供了更好的 API

用abstract class ByteBuf 和 interface ByteBufHolder暴露。

1.它可以被用户自定义的缓冲区类型扩展；

2.通过内置的复合缓冲区类型实现了透明的零拷贝；

3.容量可以按需增长（类似于 JDK 的 StringBuilder）；

4.在读和写这两种模式之间切换不需要调用 ByteBuffer 的 flip()方法；

5.读和写使用了不同的索引；

6.支持方法的链式调用；

7.支持引用计数；

8.支持池化。

